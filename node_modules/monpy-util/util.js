var util = require('util');

var corehasOwn = ({}).hasOwnProperty;

/**
 *
 */
function isPlainObject(obj) {
    var key;

    if (!obj || util.isObject(obj) || obj.nodeType) {
        return false;
    }

    try {
        if (obj.constructor &&
            !corehasOwn.call(obj, "constructor") &&
            !corehasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
        }
    } catch (e) {
        return false;
    }

    for (key in obj) { }

    return key === undefined || corehasOwn.call(obj, key);
};

exports.isPlainObject = isPlainObject;

/**
 *
 */
function isEmptyObject(obj) {
    var name;
    for (name in obj) {
        return false;
    }
    return true;
};
exports.isEmptyObject = isEmptyObject;

/**
 *
 */
function isEmptyArray(obj) {
    if(!util.isArray(obj))
    	return true;
    return obj.length === 0;
};
exports.isEmptyArray = isEmptyArray;

/**
 *
 */
function extend() {
	var src, copyIsArray, copy, name, options, clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false;

    if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
    }

    if (typeof target !== "object" && !util.isFunction(target)) {
        target = {};
    }

    if (length === i) {
        target = this;
        --i;
    }

    for (; i < length; i++) {

        if ((options = arguments[i]) != null) {
        	
            for (name in options) {
                src = target[name];
                copy = options[name];
                if (target === copy) {
                    continue;
                }

                if (deep && copy && (isPlainObject(copy) || (copyIsArray = util.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && util.isArray(src) ? src : [];

                    } else {
                        clone = src && isPlainObject(src) ? src : {};
                    }

                    target[name] = extend(deep, clone, copy);

                } else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }

    return target;
};

exports.extend = extend;

/**
 *
 */
function deep_clone(obj) {
    return (typeof uneval == "function") ? eval(uneval(obj)) : JSON.parse(JSON.stringify(obj));
}

exports.deep_clone = deep_clone;

/**
 *
 */
function toCamelCase(src){
	if(typeof src !== 'string')
		throw new Error('string only');
	return src.replace(/_([a-z])/ig, function(a, b){
		console.log('match',a,b);
		return b.toUpperCase();
	});
}

exports.toCamelCase = toCamelCase;

/**
 *
 */
function toSnakeCase(src){
	if(typeof src !== 'string')
		throw new Error('string only');
	var a = src.slice(1);
	a = (a.replace(/([A-Z])/g, '_$1'));
	return (src.substr(0,1) + a).toLowerCase();
}

exports.toSnakeCase = toSnakeCase;



extend(exports, util);